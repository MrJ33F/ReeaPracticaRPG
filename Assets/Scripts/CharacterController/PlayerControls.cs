//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/CharacterController/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player_Controls"",
            ""id"": ""cbf52cd9-fe93-4efd-96fe-80cb4f74f3d4"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2f89d82f-f5ba-4e91-a5be-6fcb0ba7a2fc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4bbd89bc-6372-41a2-9ac1-c63de12d7500"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""58ddd83f-10e0-48f7-b3c1-bef025705cfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""eb306ede-91ba-4b78-b24a-b2350fc893b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""014e57ed-723d-4580-9c0f-081dc2df304f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c6df3285-2fd1-482d-8559-0e4518157a20"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a798dcd1-a4cd-4d8e-a625-eac612a7f037"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4f6911c6-2726-44a7-9343-2180f9c3a94a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c1ee6747-ceb0-4a3b-9bb6-c76de2412001"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""906751ca-71cd-406a-bbab-5e143e3a9bd8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""48aa22e0-48ef-4b9c-a69a-5765e1c53a39"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67bd1622-ab0d-4a41-bb0d-e36e6cc7bb88"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8322d39-2a32-4123-a059-2f6a4e55592d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50d7481e-eb0a-4dac-b2a1-c9d3784886af"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player_Controls
        m_Player_Controls = asset.FindActionMap("Player_Controls", throwIfNotFound: true);
        m_Player_Controls_Movement = m_Player_Controls.FindAction("Movement", throwIfNotFound: true);
        m_Player_Controls_Jump = m_Player_Controls.FindAction("Jump", throwIfNotFound: true);
        m_Player_Controls_Attack = m_Player_Controls.FindAction("Attack", throwIfNotFound: true);
        m_Player_Controls_Roll = m_Player_Controls.FindAction("Roll", throwIfNotFound: true);
        m_Player_Controls_Dash = m_Player_Controls.FindAction("Dash", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player_Controls
    private readonly InputActionMap m_Player_Controls;
    private IPlayer_ControlsActions m_Player_ControlsActionsCallbackInterface;
    private readonly InputAction m_Player_Controls_Movement;
    private readonly InputAction m_Player_Controls_Jump;
    private readonly InputAction m_Player_Controls_Attack;
    private readonly InputAction m_Player_Controls_Roll;
    private readonly InputAction m_Player_Controls_Dash;
    public struct Player_ControlsActions
    {
        private @PlayerControls m_Wrapper;
        public Player_ControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Controls_Movement;
        public InputAction @Jump => m_Wrapper.m_Player_Controls_Jump;
        public InputAction @Attack => m_Wrapper.m_Player_Controls_Attack;
        public InputAction @Roll => m_Wrapper.m_Player_Controls_Roll;
        public InputAction @Dash => m_Wrapper.m_Player_Controls_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Player_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player_ControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayer_ControlsActions instance)
        {
            if (m_Wrapper.m_Player_ControlsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnJump;
                @Attack.started -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnAttack;
                @Roll.started -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnRoll;
                @Dash.started -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_Player_ControlsActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_Player_ControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public Player_ControlsActions @Player_Controls => new Player_ControlsActions(this);
    public interface IPlayer_ControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
    }
}
